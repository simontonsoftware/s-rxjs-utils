import { ObjectWith } from "micro-dash";
import { map } from "rxjs/operators";

/**
 * Applies a given function to each item in the upstream array and emits the result. Each item is then cached using the key generated by `buildCacheKey` so that the next emission contains references to the matching objects from previous emission, without running `buildDownstreamItem` again. The cache is only held between successive emissions.
 *
 * @param buildCacheKey A function that converts an upstream object into a string to use as the cache key. Needs to return a unique key for each item in the source array.
 * @param buildDownstreamItem A function that converts an upstream object into a downstream object
 *
 * ```
 * const mapWithCaching = mapArrayWithCaching(
 *   (item) => item.toString(),
 *   (item) => item + 1
 * )
 *
 * source:         -[1, 2]---[1, 2, 3]---[2]--|
 * mapWithCaching: -[2, 3]---[2, 3, 4]---[3]--|
 * ```
 */
export function mapArrayWithCaching<U, D>(
  buildCacheKey: (upstreamItem: U) => string,
  buildDownstreamItem: (upstreamItem: U) => D,
) {
  let cache: ObjectWith<D> = {};

  return map((upstreamItems: U[]) => {
    const nextCache: ObjectWith<D> = {};

    const downstreamItems = upstreamItems.map((upstreamItem) => {
      const cacheKey = buildCacheKey(upstreamItem);

      let downstreamItem: D;
      if (cache.hasOwnProperty(cacheKey)) {
        downstreamItem = cache[cacheKey];
      } else {
        downstreamItem = buildDownstreamItem(upstreamItem);
      }

      nextCache[cacheKey] = downstreamItem;
      return downstreamItem;
    });

    cache = nextCache;
    return downstreamItems;
  });
}
